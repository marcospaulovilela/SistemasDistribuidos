/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TheGraph.Thrift
{
    public partial class TheGraph
    {
        public interface ISync
        {
            graph G(bool scan);
            bool createVertex(vertex V);
            bool createEdge(edge E);
            bool createDuplicatedEdge(edge E);
            bool deleteVertex(vertex V);
            bool deleteEdge(edge E);
            bool deleteDuplicatedEdge(edge E);
            bool updateVertex(vertex V);
            bool updateEdge(edge E);
            bool updateDuplicatedEdge(edge E);
            bool copyVertex(vertex E);
            bool copyEdge(edge V);
            vertex readV(int name);
            edge readE(int V_Name1, int V_Name2, bool directed);
            List<edge> getEdges(vertex V);
            List<vertex> getVertex(edge E);
            List<vertex> getNeighborhood(vertex V);
            List<int> bfs(int target, List<List<int>> open, List<int> visited);
        }

        public interface Iface : ISync
        {
#if SILVERLIGHT
      IAsyncResult Begin_G(AsyncCallback callback, object state, bool scan);
      graph End_G(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_createVertex(AsyncCallback callback, object state, vertex V);
      bool End_createVertex(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_createEdge(AsyncCallback callback, object state, edge E);
      bool End_createEdge(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_createDuplicatedEdge(AsyncCallback callback, object state, edge E);
      bool End_createDuplicatedEdge(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_deleteVertex(AsyncCallback callback, object state, vertex V);
      bool End_deleteVertex(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_deleteEdge(AsyncCallback callback, object state, edge E);
      bool End_deleteEdge(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_deleteDuplicatedEdge(AsyncCallback callback, object state, edge E);
      bool End_deleteDuplicatedEdge(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_updateVertex(AsyncCallback callback, object state, vertex V);
      bool End_updateVertex(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_updateEdge(AsyncCallback callback, object state, edge E);
      bool End_updateEdge(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_updateDuplicatedEdge(AsyncCallback callback, object state, edge E);
      bool End_updateDuplicatedEdge(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_copyVertex(AsyncCallback callback, object state, vertex E);
      bool End_copyVertex(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_copyEdge(AsyncCallback callback, object state, edge V);
      bool End_copyEdge(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_readV(AsyncCallback callback, object state, int name);
      vertex End_readV(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_readE(AsyncCallback callback, object state, int V_Name1, int V_Name2, bool directed);
      edge End_readE(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_getEdges(AsyncCallback callback, object state, vertex V);
      List<edge> End_getEdges(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_getVertex(AsyncCallback callback, object state, edge E);
      List<vertex> End_getVertex(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_getNeighborhood(AsyncCallback callback, object state, vertex V);
      List<vertex> End_getNeighborhood(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_bfs(AsyncCallback callback, object state, int target, List<List<int>> open, List<int> visited);
      List<int> End_bfs(IAsyncResult asyncResult);
#endif
        }

        public class Client : IDisposable, Iface
        {
            public Client(TProtocol prot) : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol {
                get { return iprot_; }
            }
            public TProtocol OutputProtocol {
                get { return oprot_; }
            }


            #region " IDisposable Support "
            private bool _IsDisposed;

            // IDisposable
            public void Dispose()
            {
                Dispose(true);
            }


            protected virtual void Dispose(bool disposing)
            {
                if (!_IsDisposed) {
                    if (disposing) {
                        if (iprot_ != null) {
                            ((IDisposable)iprot_).Dispose();
                        }
                        if (oprot_ != null) {
                            ((IDisposable)oprot_).Dispose();
                        }
                    }
                }
                _IsDisposed = true;
            }
            #endregion



#if SILVERLIGHT
      public IAsyncResult Begin_G(AsyncCallback callback, object state, bool scan)
      {
        return send_G(callback, state, scan);
      }

      public graph End_G(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_G();
      }

#endif

            public graph G(bool scan)
            {
#if !SILVERLIGHT
                send_G(scan);
                return recv_G();

#else
        var asyncResult = Begin_G(null, null, scan);
        return End_G(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_G(AsyncCallback callback, object state, bool scan)
#else
            public void send_G(bool scan)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("G", TMessageType.Call, seqid_));
                G_args args = new G_args();
                args.Scan = scan;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public graph recv_G()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                G_result result = new G_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "G failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_createVertex(AsyncCallback callback, object state, vertex V)
      {
        return send_createVertex(callback, state, V);
      }

      public bool End_createVertex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createVertex();
      }

#endif

            public bool createVertex(vertex V)
            {
#if !SILVERLIGHT
                send_createVertex(V);
                return recv_createVertex();

#else
        var asyncResult = Begin_createVertex(null, null, V);
        return End_createVertex(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_createVertex(AsyncCallback callback, object state, vertex V)
#else
            public void send_createVertex(vertex V)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("createVertex", TMessageType.Call, seqid_));
                createVertex_args args = new createVertex_args();
                args.V = V;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_createVertex()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                createVertex_result result = new createVertex_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.vae) {
                    throw result.Vae;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createVertex failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_createEdge(AsyncCallback callback, object state, edge E)
      {
        return send_createEdge(callback, state, E);
      }

      public bool End_createEdge(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createEdge();
      }

#endif

            public bool createEdge(edge E)
            {
#if !SILVERLIGHT
                send_createEdge(E);
                return recv_createEdge();

#else
        var asyncResult = Begin_createEdge(null, null, E);
        return End_createEdge(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_createEdge(AsyncCallback callback, object state, edge E)
#else
            public void send_createEdge(edge E)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("createEdge", TMessageType.Call, seqid_));
                createEdge_args args = new createEdge_args();
                args.E = E;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_createEdge()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                createEdge_result result = new createEdge_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.vde) {
                    throw result.Vde;
                }
                if (result.__isset.eae) {
                    throw result.Eae;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createEdge failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_createDuplicatedEdge(AsyncCallback callback, object state, edge E)
      {
        return send_createDuplicatedEdge(callback, state, E);
      }

      public bool End_createDuplicatedEdge(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createDuplicatedEdge();
      }

#endif

            public bool createDuplicatedEdge(edge E)
            {
#if !SILVERLIGHT
                send_createDuplicatedEdge(E);
                return recv_createDuplicatedEdge();

#else
        var asyncResult = Begin_createDuplicatedEdge(null, null, E);
        return End_createDuplicatedEdge(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_createDuplicatedEdge(AsyncCallback callback, object state, edge E)
#else
            public void send_createDuplicatedEdge(edge E)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("createDuplicatedEdge", TMessageType.Call, seqid_));
                createDuplicatedEdge_args args = new createDuplicatedEdge_args();
                args.E = E;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_createDuplicatedEdge()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                createDuplicatedEdge_result result = new createDuplicatedEdge_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createDuplicatedEdge failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_deleteVertex(AsyncCallback callback, object state, vertex V)
      {
        return send_deleteVertex(callback, state, V);
      }

      public bool End_deleteVertex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteVertex();
      }

#endif

            public bool deleteVertex(vertex V)
            {
#if !SILVERLIGHT
                send_deleteVertex(V);
                return recv_deleteVertex();

#else
        var asyncResult = Begin_deleteVertex(null, null, V);
        return End_deleteVertex(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_deleteVertex(AsyncCallback callback, object state, vertex V)
#else
            public void send_deleteVertex(vertex V)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("deleteVertex", TMessageType.Call, seqid_));
                deleteVertex_args args = new deleteVertex_args();
                args.V = V;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_deleteVertex()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                deleteVertex_result result = new deleteVertex_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.vde) {
                    throw result.Vde;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteVertex failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_deleteEdge(AsyncCallback callback, object state, edge E)
      {
        return send_deleteEdge(callback, state, E);
      }

      public bool End_deleteEdge(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteEdge();
      }

#endif

            public bool deleteEdge(edge E)
            {
#if !SILVERLIGHT
                send_deleteEdge(E);
                return recv_deleteEdge();

#else
        var asyncResult = Begin_deleteEdge(null, null, E);
        return End_deleteEdge(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_deleteEdge(AsyncCallback callback, object state, edge E)
#else
            public void send_deleteEdge(edge E)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("deleteEdge", TMessageType.Call, seqid_));
                deleteEdge_args args = new deleteEdge_args();
                args.E = E;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_deleteEdge()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                deleteEdge_result result = new deleteEdge_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.ede) {
                    throw result.Ede;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteEdge failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_deleteDuplicatedEdge(AsyncCallback callback, object state, edge E)
      {
        return send_deleteDuplicatedEdge(callback, state, E);
      }

      public bool End_deleteDuplicatedEdge(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteDuplicatedEdge();
      }

#endif

            public bool deleteDuplicatedEdge(edge E)
            {
#if !SILVERLIGHT
                send_deleteDuplicatedEdge(E);
                return recv_deleteDuplicatedEdge();

#else
        var asyncResult = Begin_deleteDuplicatedEdge(null, null, E);
        return End_deleteDuplicatedEdge(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_deleteDuplicatedEdge(AsyncCallback callback, object state, edge E)
#else
            public void send_deleteDuplicatedEdge(edge E)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("deleteDuplicatedEdge", TMessageType.Call, seqid_));
                deleteDuplicatedEdge_args args = new deleteDuplicatedEdge_args();
                args.E = E;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_deleteDuplicatedEdge()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                deleteDuplicatedEdge_result result = new deleteDuplicatedEdge_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteDuplicatedEdge failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_updateVertex(AsyncCallback callback, object state, vertex V)
      {
        return send_updateVertex(callback, state, V);
      }

      public bool End_updateVertex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateVertex();
      }

#endif

            public bool updateVertex(vertex V)
            {
#if !SILVERLIGHT
                send_updateVertex(V);
                return recv_updateVertex();

#else
        var asyncResult = Begin_updateVertex(null, null, V);
        return End_updateVertex(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_updateVertex(AsyncCallback callback, object state, vertex V)
#else
            public void send_updateVertex(vertex V)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("updateVertex", TMessageType.Call, seqid_));
                updateVertex_args args = new updateVertex_args();
                args.V = V;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_updateVertex()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                updateVertex_result result = new updateVertex_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.vde) {
                    throw result.Vde;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateVertex failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_updateEdge(AsyncCallback callback, object state, edge E)
      {
        return send_updateEdge(callback, state, E);
      }

      public bool End_updateEdge(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateEdge();
      }

#endif

            public bool updateEdge(edge E)
            {
#if !SILVERLIGHT
                send_updateEdge(E);
                return recv_updateEdge();

#else
        var asyncResult = Begin_updateEdge(null, null, E);
        return End_updateEdge(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_updateEdge(AsyncCallback callback, object state, edge E)
#else
            public void send_updateEdge(edge E)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("updateEdge", TMessageType.Call, seqid_));
                updateEdge_args args = new updateEdge_args();
                args.E = E;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_updateEdge()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                updateEdge_result result = new updateEdge_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.ede) {
                    throw result.Ede;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateEdge failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_updateDuplicatedEdge(AsyncCallback callback, object state, edge E)
      {
        return send_updateDuplicatedEdge(callback, state, E);
      }

      public bool End_updateDuplicatedEdge(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateDuplicatedEdge();
      }

#endif

            public bool updateDuplicatedEdge(edge E)
            {
#if !SILVERLIGHT
                send_updateDuplicatedEdge(E);
                return recv_updateDuplicatedEdge();

#else
        var asyncResult = Begin_updateDuplicatedEdge(null, null, E);
        return End_updateDuplicatedEdge(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_updateDuplicatedEdge(AsyncCallback callback, object state, edge E)
#else
            public void send_updateDuplicatedEdge(edge E)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("updateDuplicatedEdge", TMessageType.Call, seqid_));
                updateDuplicatedEdge_args args = new updateDuplicatedEdge_args();
                args.E = E;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_updateDuplicatedEdge()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                updateDuplicatedEdge_result result = new updateDuplicatedEdge_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateDuplicatedEdge failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_copyVertex(AsyncCallback callback, object state, vertex E)
      {
        return send_copyVertex(callback, state, E);
      }

      public bool End_copyVertex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_copyVertex();
      }

#endif

            public bool copyVertex(vertex E)
            {
#if !SILVERLIGHT
                send_copyVertex(E);
                return recv_copyVertex();

#else
        var asyncResult = Begin_copyVertex(null, null, E);
        return End_copyVertex(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_copyVertex(AsyncCallback callback, object state, vertex E)
#else
            public void send_copyVertex(vertex E)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("copyVertex", TMessageType.Call, seqid_));
                copyVertex_args args = new copyVertex_args();
                args.E = E;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_copyVertex()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                copyVertex_result result = new copyVertex_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "copyVertex failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_copyEdge(AsyncCallback callback, object state, edge V)
      {
        return send_copyEdge(callback, state, V);
      }

      public bool End_copyEdge(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_copyEdge();
      }

#endif

            public bool copyEdge(edge V)
            {
#if !SILVERLIGHT
                send_copyEdge(V);
                return recv_copyEdge();

#else
        var asyncResult = Begin_copyEdge(null, null, V);
        return End_copyEdge(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_copyEdge(AsyncCallback callback, object state, edge V)
#else
            public void send_copyEdge(edge V)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("copyEdge", TMessageType.Call, seqid_));
                copyEdge_args args = new copyEdge_args();
                args.V = V;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_copyEdge()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                copyEdge_result result = new copyEdge_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "copyEdge failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_readV(AsyncCallback callback, object state, int name)
      {
        return send_readV(callback, state, name);
      }

      public vertex End_readV(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_readV();
      }

#endif

            public vertex readV(int name)
            {
#if !SILVERLIGHT
                send_readV(name);
                return recv_readV();

#else
        var asyncResult = Begin_readV(null, null, name);
        return End_readV(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_readV(AsyncCallback callback, object state, int name)
#else
            public void send_readV(int name)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("readV", TMessageType.Call, seqid_));
                readV_args args = new readV_args();
                args.Name = name;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public vertex recv_readV()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                readV_result result = new readV_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.vde) {
                    throw result.Vde;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "readV failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_readE(AsyncCallback callback, object state, int V_Name1, int V_Name2, bool directed)
      {
        return send_readE(callback, state, V_Name1, V_Name2, directed);
      }

      public edge End_readE(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_readE();
      }

#endif

            public edge readE(int V_Name1, int V_Name2, bool directed)
            {
#if !SILVERLIGHT
                send_readE(V_Name1, V_Name2, directed);
                return recv_readE();

#else
        var asyncResult = Begin_readE(null, null, V_Name1, V_Name2, directed);
        return End_readE(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_readE(AsyncCallback callback, object state, int V_Name1, int V_Name2, bool directed)
#else
            public void send_readE(int V_Name1, int V_Name2, bool directed)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("readE", TMessageType.Call, seqid_));
                readE_args args = new readE_args();
                args.V_Name1 = V_Name1;
                args.V_Name2 = V_Name2;
                args.Directed = directed;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public edge recv_readE()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                readE_result result = new readE_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                if (result.__isset.ede) {
                    throw result.Ede;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "readE failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_getEdges(AsyncCallback callback, object state, vertex V)
      {
        return send_getEdges(callback, state, V);
      }

      public List<edge> End_getEdges(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getEdges();
      }

#endif

            public List<edge> getEdges(vertex V)
            {
#if !SILVERLIGHT
                send_getEdges(V);
                return recv_getEdges();

#else
        var asyncResult = Begin_getEdges(null, null, V);
        return End_getEdges(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_getEdges(AsyncCallback callback, object state, vertex V)
#else
            public void send_getEdges(vertex V)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("getEdges", TMessageType.Call, seqid_));
                getEdges_args args = new getEdges_args();
                args.V = V;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<edge> recv_getEdges()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getEdges_result result = new getEdges_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEdges failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_getVertex(AsyncCallback callback, object state, edge E)
      {
        return send_getVertex(callback, state, E);
      }

      public List<vertex> End_getVertex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getVertex();
      }

#endif

            public List<vertex> getVertex(edge E)
            {
#if !SILVERLIGHT
                send_getVertex(E);
                return recv_getVertex();

#else
        var asyncResult = Begin_getVertex(null, null, E);
        return End_getVertex(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_getVertex(AsyncCallback callback, object state, edge E)
#else
            public void send_getVertex(edge E)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("getVertex", TMessageType.Call, seqid_));
                getVertex_args args = new getVertex_args();
                args.E = E;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<vertex> recv_getVertex()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getVertex_result result = new getVertex_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getVertex failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_getNeighborhood(AsyncCallback callback, object state, vertex V)
      {
        return send_getNeighborhood(callback, state, V);
      }

      public List<vertex> End_getNeighborhood(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNeighborhood();
      }

#endif

            public List<vertex> getNeighborhood(vertex V)
            {
#if !SILVERLIGHT
                send_getNeighborhood(V);
                return recv_getNeighborhood();

#else
        var asyncResult = Begin_getNeighborhood(null, null, V);
        return End_getNeighborhood(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_getNeighborhood(AsyncCallback callback, object state, vertex V)
#else
            public void send_getNeighborhood(vertex V)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("getNeighborhood", TMessageType.Call, seqid_));
                getNeighborhood_args args = new getNeighborhood_args();
                args.V = V;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<vertex> recv_getNeighborhood()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                getNeighborhood_result result = new getNeighborhood_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNeighborhood failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_bfs(AsyncCallback callback, object state, int target, List<List<int>> open, List<int> visited)
      {
        return send_bfs(callback, state, target, open, visited);
      }

      public List<int> End_bfs(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_bfs();
      }

#endif

            public List<int> bfs(int target, List<List<int>> open, List<int> visited)
            {
#if !SILVERLIGHT
                send_bfs(target, open, visited);
                return recv_bfs();

#else
        var asyncResult = Begin_bfs(null, null, target, open, visited);
        return End_bfs(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_bfs(AsyncCallback callback, object state, int target, List<List<int>> open, List<int> visited)
#else
            public void send_bfs(int target, List<List<int>> open, List<int> visited)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("bfs", TMessageType.Call, seqid_));
                bfs_args args = new bfs_args();
                args.Target = target;
                args.Open = open;
                args.Visited = visited;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<int> recv_bfs()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception) {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                bfs_result result = new bfs_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success) {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bfs failed: unknown result");
            }

        }
        public class Processor : TProcessor
        {
            public Processor(ISync iface)
            {
                iface_ = iface;
                processMap_["G"] = G_Process;
                processMap_["createVertex"] = createVertex_Process;
                processMap_["createEdge"] = createEdge_Process;
                processMap_["createDuplicatedEdge"] = createDuplicatedEdge_Process;
                processMap_["deleteVertex"] = deleteVertex_Process;
                processMap_["deleteEdge"] = deleteEdge_Process;
                processMap_["deleteDuplicatedEdge"] = deleteDuplicatedEdge_Process;
                processMap_["updateVertex"] = updateVertex_Process;
                processMap_["updateEdge"] = updateEdge_Process;
                processMap_["updateDuplicatedEdge"] = updateDuplicatedEdge_Process;
                processMap_["copyVertex"] = copyVertex_Process;
                processMap_["copyEdge"] = copyEdge_Process;
                processMap_["readV"] = readV_Process;
                processMap_["readE"] = readE_Process;
                processMap_["getEdges"] = getEdges_Process;
                processMap_["getVertex"] = getVertex_Process;
                processMap_["getNeighborhood"] = getNeighborhood_Process;
                processMap_["bfs"] = bfs_Process;
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
            private ISync iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null) {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                } catch (IOException) {
                    return false;
                }
                return true;
            }

            public void G_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                G_args args = new G_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                G_result result = new G_result();
                try {
                    result.Success = iface_.G(args.Scan);
                    oprot.WriteMessageBegin(new TMessage("G", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("G", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void createVertex_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                createVertex_args args = new createVertex_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                createVertex_result result = new createVertex_result();
                try {
                    try {
                        result.Success = iface_.createVertex(args.V);
                    } catch (VertexAlreadyExists vae) {
                        result.Vae = vae;
                    }
                    oprot.WriteMessageBegin(new TMessage("createVertex", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("createVertex", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void createEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                createEdge_args args = new createEdge_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                createEdge_result result = new createEdge_result();
                try {
                    try {
                        result.Success = iface_.createEdge(args.E);
                    } catch (VertexDontExists vde) {
                        result.Vde = vde;
                    } catch (EdgeAlreadyExists eae) {
                        result.Eae = eae;
                    }
                    oprot.WriteMessageBegin(new TMessage("createEdge", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("createEdge", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void createDuplicatedEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                createDuplicatedEdge_args args = new createDuplicatedEdge_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                createDuplicatedEdge_result result = new createDuplicatedEdge_result();
                try {
                    result.Success = iface_.createDuplicatedEdge(args.E);
                    oprot.WriteMessageBegin(new TMessage("createDuplicatedEdge", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("createDuplicatedEdge", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void deleteVertex_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                deleteVertex_args args = new deleteVertex_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                deleteVertex_result result = new deleteVertex_result();
                try {
                    try {
                        result.Success = iface_.deleteVertex(args.V);
                    } catch (VertexDontExists vde) {
                        result.Vde = vde;
                    }
                    oprot.WriteMessageBegin(new TMessage("deleteVertex", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("deleteVertex", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void deleteEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                deleteEdge_args args = new deleteEdge_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                deleteEdge_result result = new deleteEdge_result();
                try {
                    try {
                        result.Success = iface_.deleteEdge(args.E);
                    } catch (EdgeDontExists ede) {
                        result.Ede = ede;
                    }
                    oprot.WriteMessageBegin(new TMessage("deleteEdge", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("deleteEdge", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void deleteDuplicatedEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                deleteDuplicatedEdge_args args = new deleteDuplicatedEdge_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                deleteDuplicatedEdge_result result = new deleteDuplicatedEdge_result();
                try {
                    result.Success = iface_.deleteDuplicatedEdge(args.E);
                    oprot.WriteMessageBegin(new TMessage("deleteDuplicatedEdge", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("deleteDuplicatedEdge", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void updateVertex_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                updateVertex_args args = new updateVertex_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                updateVertex_result result = new updateVertex_result();
                try {
                    try {
                        result.Success = iface_.updateVertex(args.V);
                    } catch (VertexDontExists vde) {
                        result.Vde = vde;
                    }
                    oprot.WriteMessageBegin(new TMessage("updateVertex", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("updateVertex", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void updateEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                updateEdge_args args = new updateEdge_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                updateEdge_result result = new updateEdge_result();
                try {
                    try {
                        result.Success = iface_.updateEdge(args.E);
                    } catch (EdgeDontExists ede) {
                        result.Ede = ede;
                    }
                    oprot.WriteMessageBegin(new TMessage("updateEdge", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("updateEdge", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void updateDuplicatedEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                updateDuplicatedEdge_args args = new updateDuplicatedEdge_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                updateDuplicatedEdge_result result = new updateDuplicatedEdge_result();
                try {
                    result.Success = iface_.updateDuplicatedEdge(args.E);
                    oprot.WriteMessageBegin(new TMessage("updateDuplicatedEdge", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("updateDuplicatedEdge", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void copyVertex_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                copyVertex_args args = new copyVertex_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                copyVertex_result result = new copyVertex_result();
                try {
                    result.Success = iface_.copyVertex(args.E);
                    oprot.WriteMessageBegin(new TMessage("copyVertex", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("copyVertex", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void copyEdge_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                copyEdge_args args = new copyEdge_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                copyEdge_result result = new copyEdge_result();
                try {
                    result.Success = iface_.copyEdge(args.V);
                    oprot.WriteMessageBegin(new TMessage("copyEdge", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("copyEdge", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void readV_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                readV_args args = new readV_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                readV_result result = new readV_result();
                try {
                    try {
                        result.Success = iface_.readV(args.Name);
                    } catch (VertexDontExists vde) {
                        result.Vde = vde;
                    }
                    oprot.WriteMessageBegin(new TMessage("readV", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("readV", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void readE_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                readE_args args = new readE_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                readE_result result = new readE_result();
                try {
                    try {
                        result.Success = iface_.readE(args.V_Name1, args.V_Name2, args.Directed);
                    } catch (EdgeDontExists ede) {
                        result.Ede = ede;
                    }
                    oprot.WriteMessageBegin(new TMessage("readE", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("readE", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getEdges_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                getEdges_args args = new getEdges_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getEdges_result result = new getEdges_result();
                try {
                    result.Success = iface_.getEdges(args.V);
                    oprot.WriteMessageBegin(new TMessage("getEdges", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("getEdges", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getVertex_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                getVertex_args args = new getVertex_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getVertex_result result = new getVertex_result();
                try {
                    result.Success = iface_.getVertex(args.E);
                    oprot.WriteMessageBegin(new TMessage("getVertex", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("getVertex", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void getNeighborhood_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                getNeighborhood_args args = new getNeighborhood_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                getNeighborhood_result result = new getNeighborhood_result();
                try {
                    result.Success = iface_.getNeighborhood(args.V);
                    oprot.WriteMessageBegin(new TMessage("getNeighborhood", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("getNeighborhood", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void bfs_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                bfs_args args = new bfs_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                bfs_result result = new bfs_result();
                try {
                    result.Success = iface_.bfs(args.Target, args.Open, args.Visited);
                    oprot.WriteMessageBegin(new TMessage("bfs", TMessageType.Reply, seqid));
                    result.Write(oprot);
                } catch (TTransportException) {
                    throw;
                } catch (Exception ex) {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("bfs", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class G_args : TBase
        {
            private bool _scan;

            public bool Scan {
                get {
                    return _scan;
                }
                set {
                    __isset.scan = true;
                    this._scan = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool scan;
            }

            public G_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Bool) {
                                    Scan = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("G_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (__isset.scan) {
                        field.Name = "scan";
                        field.Type = TType.Bool;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Scan);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("G_args(");
                bool __first = true;
                if (__isset.scan) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Scan: ");
                    __sb.Append(Scan);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class G_result : TBase
        {
            private graph _success;

            public graph Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public G_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Struct) {
                                    Success = new graph();
                                    Success.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("G_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        if (Success != null) {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            Success.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("G_result(");
                bool __first = true;
                if (Success != null && __isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success == null ? "<null>" : Success.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class createVertex_args : TBase
        {
            private vertex _V;

            public vertex V {
                get {
                    return _V;
                }
                set {
                    __isset.V = true;
                    this._V = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool V;
            }

            public createVertex_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    V = new vertex();
                                    V.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("createVertex_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (V != null && __isset.V) {
                        field.Name = "V";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        V.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("createVertex_args(");
                bool __first = true;
                if (V != null && __isset.V) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("V: ");
                    __sb.Append(V == null ? "<null>" : V.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class createVertex_result : TBase
        {
            private bool _success;
            private VertexAlreadyExists _vae;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public VertexAlreadyExists Vae {
                get {
                    return _vae;
                }
                set {
                    __isset.vae = true;
                    this._vae = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
                public bool vae;
            }

            public createVertex_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct) {
                                    Vae = new VertexAlreadyExists();
                                    Vae.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("createVertex_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    } else if (this.__isset.vae) {
                        if (Vae != null) {
                            field.Name = "Vae";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            oprot.WriteFieldBegin(field);
                            Vae.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("createVertex_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                if (Vae != null && __isset.vae) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Vae: ");
                    __sb.Append(Vae == null ? "<null>" : Vae.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class createEdge_args : TBase
        {
            private edge _E;

            public edge E {
                get {
                    return _E;
                }
                set {
                    __isset.E = true;
                    this._E = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool E;
            }

            public createEdge_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    E = new edge();
                                    E.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("createEdge_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (E != null && __isset.E) {
                        field.Name = "E";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        E.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("createEdge_args(");
                bool __first = true;
                if (E != null && __isset.E) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("E: ");
                    __sb.Append(E == null ? "<null>" : E.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class createEdge_result : TBase
        {
            private bool _success;
            private VertexDontExists _vde;
            private EdgeAlreadyExists _eae;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public VertexDontExists Vde {
                get {
                    return _vde;
                }
                set {
                    __isset.vde = true;
                    this._vde = value;
                }
            }

            public EdgeAlreadyExists Eae {
                get {
                    return _eae;
                }
                set {
                    __isset.eae = true;
                    this._eae = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
                public bool vde;
                public bool eae;
            }

            public createEdge_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct) {
                                    Vde = new VertexDontExists();
                                    Vde.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct) {
                                    Eae = new EdgeAlreadyExists();
                                    Eae.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("createEdge_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    } else if (this.__isset.vde) {
                        if (Vde != null) {
                            field.Name = "Vde";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            oprot.WriteFieldBegin(field);
                            Vde.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    } else if (this.__isset.eae) {
                        if (Eae != null) {
                            field.Name = "Eae";
                            field.Type = TType.Struct;
                            field.ID = 2;
                            oprot.WriteFieldBegin(field);
                            Eae.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("createEdge_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                if (Vde != null && __isset.vde) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Vde: ");
                    __sb.Append(Vde == null ? "<null>" : Vde.ToString());
                }
                if (Eae != null && __isset.eae) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Eae: ");
                    __sb.Append(Eae == null ? "<null>" : Eae.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class createDuplicatedEdge_args : TBase
        {
            private edge _E;

            public edge E {
                get {
                    return _E;
                }
                set {
                    __isset.E = true;
                    this._E = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool E;
            }

            public createDuplicatedEdge_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    E = new edge();
                                    E.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("createDuplicatedEdge_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (E != null && __isset.E) {
                        field.Name = "E";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        E.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("createDuplicatedEdge_args(");
                bool __first = true;
                if (E != null && __isset.E) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("E: ");
                    __sb.Append(E == null ? "<null>" : E.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class createDuplicatedEdge_result : TBase
        {
            private bool _success;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public createDuplicatedEdge_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("createDuplicatedEdge_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("createDuplicatedEdge_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class deleteVertex_args : TBase
        {
            private vertex _V;

            public vertex V {
                get {
                    return _V;
                }
                set {
                    __isset.V = true;
                    this._V = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool V;
            }

            public deleteVertex_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    V = new vertex();
                                    V.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("deleteVertex_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (V != null && __isset.V) {
                        field.Name = "V";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        V.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("deleteVertex_args(");
                bool __first = true;
                if (V != null && __isset.V) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("V: ");
                    __sb.Append(V == null ? "<null>" : V.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class deleteVertex_result : TBase
        {
            private bool _success;
            private VertexDontExists _vde;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public VertexDontExists Vde {
                get {
                    return _vde;
                }
                set {
                    __isset.vde = true;
                    this._vde = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
                public bool vde;
            }

            public deleteVertex_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct) {
                                    Vde = new VertexDontExists();
                                    Vde.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("deleteVertex_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    } else if (this.__isset.vde) {
                        if (Vde != null) {
                            field.Name = "Vde";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            oprot.WriteFieldBegin(field);
                            Vde.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("deleteVertex_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                if (Vde != null && __isset.vde) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Vde: ");
                    __sb.Append(Vde == null ? "<null>" : Vde.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class deleteEdge_args : TBase
        {
            private edge _E;

            public edge E {
                get {
                    return _E;
                }
                set {
                    __isset.E = true;
                    this._E = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool E;
            }

            public deleteEdge_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    E = new edge();
                                    E.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("deleteEdge_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (E != null && __isset.E) {
                        field.Name = "E";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        E.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("deleteEdge_args(");
                bool __first = true;
                if (E != null && __isset.E) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("E: ");
                    __sb.Append(E == null ? "<null>" : E.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class deleteEdge_result : TBase
        {
            private bool _success;
            private EdgeDontExists _ede;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public EdgeDontExists Ede {
                get {
                    return _ede;
                }
                set {
                    __isset.ede = true;
                    this._ede = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
                public bool ede;
            }

            public deleteEdge_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct) {
                                    Ede = new EdgeDontExists();
                                    Ede.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("deleteEdge_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    } else if (this.__isset.ede) {
                        if (Ede != null) {
                            field.Name = "Ede";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            oprot.WriteFieldBegin(field);
                            Ede.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("deleteEdge_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                if (Ede != null && __isset.ede) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Ede: ");
                    __sb.Append(Ede == null ? "<null>" : Ede.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class deleteDuplicatedEdge_args : TBase
        {
            private edge _E;

            public edge E {
                get {
                    return _E;
                }
                set {
                    __isset.E = true;
                    this._E = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool E;
            }

            public deleteDuplicatedEdge_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case -1:
                                if (field.Type == TType.Struct) {
                                    E = new edge();
                                    E.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("deleteDuplicatedEdge_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (E != null && __isset.E) {
                        field.Name = "E";
                        field.Type = TType.Struct;
                        field.ID = -1;
                        oprot.WriteFieldBegin(field);
                        E.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("deleteDuplicatedEdge_args(");
                bool __first = true;
                if (E != null && __isset.E) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("E: ");
                    __sb.Append(E == null ? "<null>" : E.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class deleteDuplicatedEdge_result : TBase
        {
            private bool _success;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public deleteDuplicatedEdge_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("deleteDuplicatedEdge_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("deleteDuplicatedEdge_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class updateVertex_args : TBase
        {
            private vertex _V;

            public vertex V {
                get {
                    return _V;
                }
                set {
                    __isset.V = true;
                    this._V = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool V;
            }

            public updateVertex_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    V = new vertex();
                                    V.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("updateVertex_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (V != null && __isset.V) {
                        field.Name = "V";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        V.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("updateVertex_args(");
                bool __first = true;
                if (V != null && __isset.V) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("V: ");
                    __sb.Append(V == null ? "<null>" : V.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class updateVertex_result : TBase
        {
            private bool _success;
            private VertexDontExists _vde;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public VertexDontExists Vde {
                get {
                    return _vde;
                }
                set {
                    __isset.vde = true;
                    this._vde = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
                public bool vde;
            }

            public updateVertex_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct) {
                                    Vde = new VertexDontExists();
                                    Vde.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("updateVertex_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    } else if (this.__isset.vde) {
                        if (Vde != null) {
                            field.Name = "Vde";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            oprot.WriteFieldBegin(field);
                            Vde.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("updateVertex_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                if (Vde != null && __isset.vde) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Vde: ");
                    __sb.Append(Vde == null ? "<null>" : Vde.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class updateEdge_args : TBase
        {
            private edge _E;

            public edge E {
                get {
                    return _E;
                }
                set {
                    __isset.E = true;
                    this._E = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool E;
            }

            public updateEdge_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    E = new edge();
                                    E.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("updateEdge_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (E != null && __isset.E) {
                        field.Name = "E";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        E.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("updateEdge_args(");
                bool __first = true;
                if (E != null && __isset.E) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("E: ");
                    __sb.Append(E == null ? "<null>" : E.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class updateEdge_result : TBase
        {
            private bool _success;
            private EdgeDontExists _ede;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public EdgeDontExists Ede {
                get {
                    return _ede;
                }
                set {
                    __isset.ede = true;
                    this._ede = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
                public bool ede;
            }

            public updateEdge_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct) {
                                    Ede = new EdgeDontExists();
                                    Ede.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("updateEdge_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    } else if (this.__isset.ede) {
                        if (Ede != null) {
                            field.Name = "Ede";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            oprot.WriteFieldBegin(field);
                            Ede.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("updateEdge_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                if (Ede != null && __isset.ede) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Ede: ");
                    __sb.Append(Ede == null ? "<null>" : Ede.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class updateDuplicatedEdge_args : TBase
        {
            private edge _E;

            public edge E {
                get {
                    return _E;
                }
                set {
                    __isset.E = true;
                    this._E = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool E;
            }

            public updateDuplicatedEdge_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    E = new edge();
                                    E.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("updateDuplicatedEdge_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (E != null && __isset.E) {
                        field.Name = "E";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        E.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("updateDuplicatedEdge_args(");
                bool __first = true;
                if (E != null && __isset.E) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("E: ");
                    __sb.Append(E == null ? "<null>" : E.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class updateDuplicatedEdge_result : TBase
        {
            private bool _success;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public updateDuplicatedEdge_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("updateDuplicatedEdge_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("updateDuplicatedEdge_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class copyVertex_args : TBase
        {
            private vertex _E;

            public vertex E {
                get {
                    return _E;
                }
                set {
                    __isset.E = true;
                    this._E = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool E;
            }

            public copyVertex_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    E = new vertex();
                                    E.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("copyVertex_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (E != null && __isset.E) {
                        field.Name = "E";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        E.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("copyVertex_args(");
                bool __first = true;
                if (E != null && __isset.E) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("E: ");
                    __sb.Append(E == null ? "<null>" : E.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class copyVertex_result : TBase
        {
            private bool _success;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public copyVertex_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("copyVertex_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("copyVertex_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class copyEdge_args : TBase
        {
            private edge _V;

            public edge V {
                get {
                    return _V;
                }
                set {
                    __isset.V = true;
                    this._V = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool V;
            }

            public copyEdge_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    V = new edge();
                                    V.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("copyEdge_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (V != null && __isset.V) {
                        field.Name = "V";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        V.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("copyEdge_args(");
                bool __first = true;
                if (V != null && __isset.V) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("V: ");
                    __sb.Append(V == null ? "<null>" : V.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class copyEdge_result : TBase
        {
            private bool _success;

            public bool Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public copyEdge_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Bool) {
                                    Success = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("copyEdge_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Success);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("copyEdge_result(");
                bool __first = true;
                if (__isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class readV_args : TBase
        {
            private int _name;

            public int Name {
                get {
                    return _name;
                }
                set {
                    __isset.name = true;
                    this._name = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool name;
            }

            public readV_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.I32) {
                                    Name = iprot.ReadI32();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("readV_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (__isset.name) {
                        field.Name = "name";
                        field.Type = TType.I32;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(Name);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("readV_args(");
                bool __first = true;
                if (__isset.name) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Name: ");
                    __sb.Append(Name);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class readV_result : TBase
        {
            private vertex _success;
            private VertexDontExists _vde;

            public vertex Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public VertexDontExists Vde {
                get {
                    return _vde;
                }
                set {
                    __isset.vde = true;
                    this._vde = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
                public bool vde;
            }

            public readV_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Struct) {
                                    Success = new vertex();
                                    Success.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct) {
                                    Vde = new VertexDontExists();
                                    Vde.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("readV_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        if (Success != null) {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            Success.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    } else if (this.__isset.vde) {
                        if (Vde != null) {
                            field.Name = "Vde";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            oprot.WriteFieldBegin(field);
                            Vde.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("readV_result(");
                bool __first = true;
                if (Success != null && __isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success == null ? "<null>" : Success.ToString());
                }
                if (Vde != null && __isset.vde) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Vde: ");
                    __sb.Append(Vde == null ? "<null>" : Vde.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class readE_args : TBase
        {
            private int _V_Name1;
            private int _V_Name2;
            private bool _directed;

            public int V_Name1 {
                get {
                    return _V_Name1;
                }
                set {
                    __isset.V_Name1 = true;
                    this._V_Name1 = value;
                }
            }

            public int V_Name2 {
                get {
                    return _V_Name2;
                }
                set {
                    __isset.V_Name2 = true;
                    this._V_Name2 = value;
                }
            }

            public bool Directed {
                get {
                    return _directed;
                }
                set {
                    __isset.directed = true;
                    this._directed = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool V_Name1;
                public bool V_Name2;
                public bool directed;
            }

            public readE_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.I32) {
                                    V_Name1 = iprot.ReadI32();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.I32) {
                                    V_Name2 = iprot.ReadI32();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.Bool) {
                                    Directed = iprot.ReadBool();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("readE_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (__isset.V_Name1) {
                        field.Name = "V_Name1";
                        field.Type = TType.I32;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(V_Name1);
                        oprot.WriteFieldEnd();
                    }
                    if (__isset.V_Name2) {
                        field.Name = "V_Name2";
                        field.Type = TType.I32;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(V_Name2);
                        oprot.WriteFieldEnd();
                    }
                    if (__isset.directed) {
                        field.Name = "directed";
                        field.Type = TType.Bool;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteBool(Directed);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("readE_args(");
                bool __first = true;
                if (__isset.V_Name1) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("V_Name1: ");
                    __sb.Append(V_Name1);
                }
                if (__isset.V_Name2) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("V_Name2: ");
                    __sb.Append(V_Name2);
                }
                if (__isset.directed) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Directed: ");
                    __sb.Append(Directed);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class readE_result : TBase
        {
            private edge _success;
            private EdgeDontExists _ede;

            public edge Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public EdgeDontExists Ede {
                get {
                    return _ede;
                }
                set {
                    __isset.ede = true;
                    this._ede = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
                public bool ede;
            }

            public readE_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.Struct) {
                                    Success = new edge();
                                    Success.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct) {
                                    Ede = new EdgeDontExists();
                                    Ede.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("readE_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        if (Success != null) {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            Success.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    } else if (this.__isset.ede) {
                        if (Ede != null) {
                            field.Name = "Ede";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            oprot.WriteFieldBegin(field);
                            Ede.Write(oprot);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("readE_result(");
                bool __first = true;
                if (Success != null && __isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success == null ? "<null>" : Success.ToString());
                }
                if (Ede != null && __isset.ede) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Ede: ");
                    __sb.Append(Ede == null ? "<null>" : Ede.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class getEdges_args : TBase
        {
            private vertex _V;

            public vertex V {
                get {
                    return _V;
                }
                set {
                    __isset.V = true;
                    this._V = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool V;
            }

            public getEdges_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    V = new vertex();
                                    V.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("getEdges_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (V != null && __isset.V) {
                        field.Name = "V";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        V.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("getEdges_args(");
                bool __first = true;
                if (V != null && __isset.V) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("V: ");
                    __sb.Append(V == null ? "<null>" : V.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class getEdges_result : TBase
        {
            private List<edge> _success;

            public List<edge> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public getEdges_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.List) {
                                    {
                                        Success = new List<edge>();
                                        TList _list8 = iprot.ReadListBegin();
                                        for (int _i9 = 0; _i9 < _list8.Count; ++_i9) {
                                            edge _elem10;
                                            _elem10 = new edge();
                                            _elem10.Read(iprot);
                                            Success.Add(_elem10);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("getEdges_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        if (Success != null) {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                                foreach (edge _iter11 in Success) {
                                    _iter11.Write(oprot);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("getEdges_result(");
                bool __first = true;
                if (Success != null && __isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class getVertex_args : TBase
        {
            private edge _E;

            public edge E {
                get {
                    return _E;
                }
                set {
                    __isset.E = true;
                    this._E = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool E;
            }

            public getVertex_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    E = new edge();
                                    E.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("getVertex_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (E != null && __isset.E) {
                        field.Name = "E";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        E.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("getVertex_args(");
                bool __first = true;
                if (E != null && __isset.E) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("E: ");
                    __sb.Append(E == null ? "<null>" : E.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class getVertex_result : TBase
        {
            private List<vertex> _success;

            public List<vertex> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public getVertex_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.List) {
                                    {
                                        Success = new List<vertex>();
                                        TList _list12 = iprot.ReadListBegin();
                                        for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {
                                            vertex _elem14;
                                            _elem14 = new vertex();
                                            _elem14.Read(iprot);
                                            Success.Add(_elem14);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("getVertex_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        if (Success != null) {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                                foreach (vertex _iter15 in Success) {
                                    _iter15.Write(oprot);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("getVertex_result(");
                bool __first = true;
                if (Success != null && __isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class getNeighborhood_args : TBase
        {
            private vertex _V;

            public vertex V {
                get {
                    return _V;
                }
                set {
                    __isset.V = true;
                    this._V = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool V;
            }

            public getNeighborhood_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 1:
                                if (field.Type == TType.Struct) {
                                    V = new vertex();
                                    V.Read(iprot);
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("getNeighborhood_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (V != null && __isset.V) {
                        field.Name = "V";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        V.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("getNeighborhood_args(");
                bool __first = true;
                if (V != null && __isset.V) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("V: ");
                    __sb.Append(V == null ? "<null>" : V.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class getNeighborhood_result : TBase
        {
            private List<vertex> _success;

            public List<vertex> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public getNeighborhood_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.List) {
                                    {
                                        Success = new List<vertex>();
                                        TList _list16 = iprot.ReadListBegin();
                                        for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {
                                            vertex _elem18;
                                            _elem18 = new vertex();
                                            _elem18.Read(iprot);
                                            Success.Add(_elem18);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("getNeighborhood_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        if (Success != null) {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                                foreach (vertex _iter19 in Success) {
                                    _iter19.Write(oprot);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("getNeighborhood_result(");
                bool __first = true;
                if (Success != null && __isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class bfs_args : TBase
        {
            private int _target;
            private List<List<int>> _open;
            private List<int> _visited;

            public int Target {
                get {
                    return _target;
                }
                set {
                    __isset.target = true;
                    this._target = value;
                }
            }

            public List<List<int>> Open {
                get {
                    return _open;
                }
                set {
                    __isset.open = true;
                    this._open = value;
                }
            }

            public List<int> Visited {
                get {
                    return _visited;
                }
                set {
                    __isset.visited = true;
                    this._visited = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool target;
                public bool open;
                public bool visited;
            }

            public bfs_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case -1:
                                if (field.Type == TType.I32) {
                                    Target = iprot.ReadI32();
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case -2:
                                if (field.Type == TType.List) {
                                    {
                                        Open = new List<List<int>>();
                                        TList _list20 = iprot.ReadListBegin();
                                        for (int _i21 = 0; _i21 < _list20.Count; ++_i21) {
                                            List<int> _elem22;
                                            {
                                                _elem22 = new List<int>();
                                                TList _list23 = iprot.ReadListBegin();
                                                for (int _i24 = 0; _i24 < _list23.Count; ++_i24) {
                                                    int _elem25;
                                                    _elem25 = iprot.ReadI32();
                                                    _elem22.Add(_elem25);
                                                }
                                                iprot.ReadListEnd();
                                            }
                                            Open.Add(_elem22);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case -3:
                                if (field.Type == TType.List) {
                                    {
                                        Visited = new List<int>();
                                        TList _list26 = iprot.ReadListBegin();
                                        for (int _i27 = 0; _i27 < _list26.Count; ++_i27) {
                                            int _elem28;
                                            _elem28 = iprot.ReadI32();
                                            Visited.Add(_elem28);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("bfs_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (Visited != null && __isset.visited) {
                        field.Name = "visited";
                        field.Type = TType.List;
                        field.ID = -3;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.I32, Visited.Count));
                            foreach (int _iter29 in Visited) {
                                oprot.WriteI32(_iter29);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                    if (Open != null && __isset.open) {
                        field.Name = "open";
                        field.Type = TType.List;
                        field.ID = -2;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.List, Open.Count));
                            foreach (List<int> _iter30 in Open) {
                                {
                                    oprot.WriteListBegin(new TList(TType.I32, _iter30.Count));
                                    foreach (int _iter31 in _iter30) {
                                        oprot.WriteI32(_iter31);
                                    }
                                    oprot.WriteListEnd();
                                }
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                    if (__isset.target) {
                        field.Name = "target";
                        field.Type = TType.I32;
                        field.ID = -1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(Target);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("bfs_args(");
                bool __first = true;
                if (__isset.target) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Target: ");
                    __sb.Append(Target);
                }
                if (Open != null && __isset.open) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Open: ");
                    __sb.Append(Open);
                }
                if (Visited != null && __isset.visited) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Visited: ");
                    __sb.Append(Visited);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class bfs_result : TBase
        {
            private List<int> _success;

            public List<int> Success {
                get {
                    return _success;
                }
                set {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public bfs_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true) {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop) {
                            break;
                        }
                        switch (field.ID) {
                            case 0:
                                if (field.Type == TType.List) {
                                    {
                                        Success = new List<int>();
                                        TList _list32 = iprot.ReadListBegin();
                                        for (int _i33 = 0; _i33 < _list32.Count; ++_i33) {
                                            int _elem34;
                                            _elem34 = iprot.ReadI32();
                                            Success.Add(_elem34);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                } else {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                } finally {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try {
                    TStruct struc = new TStruct("bfs_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success) {
                        if (Success != null) {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.I32, Success.Count));
                                foreach (int _iter35 in Success) {
                                    oprot.WriteI32(_iter35);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                } finally {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("bfs_result(");
                bool __first = true;
                if (Success != null && __isset.success) {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }

    }
}
